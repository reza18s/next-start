generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL") // uses connection pooling
  directUrl    = env("DATABASE_URL") // uses a direct connection
  relationMode = "prisma"
}

enum Role {
  ADMIN_OWNER
  ADMIN
  USER
  GUEST
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  avatarUrl      String?
  email          String         @unique
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  history        Json[]
  phoneNumber    Int            @unique
  NationalNumber Int
  city           String?
  address        String?
  role           Role           @default(USER)
  Permissions    Permissions[]
  Notification   Notification[]
  WishList       WishList[]
  CardList       CardList[]
}

model Product {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  brand          String?
  name           String
  title          String?
  tag            String[] @default(["all"])
  color          String[]
  description    String
  Weight         Int
  Cover          String
  Images         String[]
  category       String
  rating         Int?     @default(0)
  ratingQuantity Int?     @default(0)
  details        Json[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String   @db.ObjectId
  Reviews        Review[]
  creator        String

  @@index([userId])
}

model WishList {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @db.ObjectId
  products Json[]

  User      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String @db.ObjectId

  @@index([userId])
}

model CardList {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @db.ObjectId
  products Json[]

  User      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String @db.ObjectId

  @@index([userId])
}

model Order {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  products     Json[]
  address      String
  Weight       Int
  price        Int
  userId       String
  city         String
  postNumber   Int
  status       String
  deliveryData String
  isPayed      Boolean
  isDeliverd   Boolean
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Review {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  title       String?
  ratings     Int
  creator     String
  Product     Product? @relation(fields: [productId], references: [id])
  productId   String?  @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
}

model Permissions {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  email  String
  User   User    @relation(fields: [email], references: [email], onDelete: Cascade)
  access Boolean

  @@index([email])
}

model Contact {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  notification String
  userId       String @db.ObjectId

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
